// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import "forge-std/console.sol";

import "../TestBase.sol";
import "../../src/V3Utils.sol";

contract V3UtilsIntegrationTest is Test, TestBase {

    V3Utils c;
    uint256 mainnetFork;

    address constant TEST_ACCOUNT = 0x8cadb20A4811f363Dadb863A190708bEd26245F8;
    uint constant TEST_NFT_ID = 24181; // DAI/USCD 0.05% - one sided only DAI - current tick is near -276326
    uint constant TEST_NFT_ID_IN_RANGE = 23901; // DAI/USCD 0.05% - two sided

    address constant TEST_NFT_WITH_FEES_ACCOUNT = 0xa3eF006a7da5BcD1144d8BB86EfF1734f46A0c1E;
    uint constant TEST_NFT_WITH_FEES = 4660;

    address constant BENEFICIARY_ACCOUNT = 0xA53858bd4a9490a4063C5abF55bf88b4D35ECaf2;

    function setUp() external {
        mainnetFork = vm.createFork("https://rpc.ankr.com/eth", 15489169);
        vm.selectFork(mainnetFork);
        c = new V3Utils(WETH, NPM);
        vm.deal(BENEFICIARY_ACCOUNT, 1 ether);
    }

    function testUnauthorizedTransfer() external {
        vm.expectRevert(abi.encodePacked("ERC721: transfer caller is not owner nor approved"));
        V3Utils.Instructions memory inst = V3Utils.Instructions(V3Utils.WhatToDo.CHANGE_RANGE,address(0),0,0,"",0,0,"", 0, 0, 0, 0, 0, 0, 0, "");
        NPM.safeTransferFrom(TEST_ACCOUNT, address(c), TEST_NFT_ID, abi.encode(inst));
    }

    function testInvalidInstructions() external {
        // reverts with ERC721Receiver error if Instructions are invalid
        vm.expectRevert(abi.encodePacked("ERC721: transfer to non ERC721Receiver implementer"));
        vm.prank(TEST_ACCOUNT);
        NPM.safeTransferFrom(TEST_ACCOUNT, address(c), TEST_NFT_ID, abi.encode(true, false, 1, "test"));
    }

    function testTransferWithChangeRange() external {

        // add liquidity to existing (empty) position (add 1 DAI / 0 USDC)
        _increaseLiquidity();

        uint countBefore = NPM.balanceOf(TEST_ACCOUNT);

        // swap half of DAI to USDC and add full range
        V3Utils.Instructions memory inst = V3Utils.Instructions(
            V3Utils.WhatToDo.CHANGE_RANGE,
            address(USDC),
            500000000000000000,
            400000,
            _get05DAIToUSDCSwapData(),
            0,
            0,
            "",
            100, // change fee as well
            MIN_TICK_100,
            -MIN_TICK_100,
            0,
            0,
            0, 
            block.timestamp,
            "");

        vm.prank(TEST_ACCOUNT);
        NPM.safeTransferFrom(TEST_ACCOUNT, address(c), TEST_NFT_ID, abi.encode(inst));

        uint countAfter = NPM.balanceOf(TEST_ACCOUNT);
        assertGt(countAfter, countBefore);
    }

    function testTransferWithCompoundNoSwap() external {

        V3Utils.Instructions memory inst = V3Utils.Instructions(V3Utils.WhatToDo.COMPOUND_FEES,address(0),0,0,"",0,0,"", 0, 0, 0, 0, 0, 0, block.timestamp, "");

        uint daiBefore = DAI.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        uint usdcBefore = USDC.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        (,,,,,,,uint128 liquidityBefore,,,,) = NPM.positions(TEST_NFT_WITH_FEES);

        assertEq(daiBefore, 14382879654257202832190);
        assertEq(usdcBefore, 754563026);
        assertEq(liquidityBefore, 12922419498089422291);

        vm.prank(TEST_NFT_WITH_FEES_ACCOUNT);
        NPM.safeTransferFrom(TEST_NFT_WITH_FEES_ACCOUNT, address(c), TEST_NFT_WITH_FEES, abi.encode(inst));

        uint daiAfter = DAI.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        uint usdcAfter = USDC.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        (,,,,,,,uint128 liquidityAfter,,,,) = NPM.positions(TEST_NFT_WITH_FEES);

        assertEq(daiAfter, 14382879654257202837726);
        assertEq(usdcAfter, 806331572);
        assertEq(liquidityAfter, 13033419710865069719);

    }

    function testTransferWithCompoundSwap() external {

        V3Utils.Instructions memory inst = V3Utils.Instructions(
            V3Utils.WhatToDo.COMPOUND_FEES,
            address(USDC),
            500000000000000000,
            400000,
            _get05DAIToUSDCSwapData(),0,0,"", 0, 0, 0, 0, 0, 0, block.timestamp, "");

        uint daiBefore = DAI.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        uint usdcBefore = USDC.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        (,,,,,,,uint128 liquidityBefore,,,,) = NPM.positions(TEST_NFT_WITH_FEES);

        assertEq(daiBefore, 14382879654257202832190);
        assertEq(usdcBefore, 754563026);
        assertEq(liquidityBefore, 12922419498089422291);

        vm.prank(TEST_NFT_WITH_FEES_ACCOUNT);
        NPM.safeTransferFrom(TEST_NFT_WITH_FEES_ACCOUNT, address(c), TEST_NFT_WITH_FEES, abi.encode(inst));

        uint daiAfter = DAI.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        uint usdcAfter = USDC.balanceOf(TEST_NFT_WITH_FEES_ACCOUNT);
        (,,,,,,,uint128 liquidityAfter,,,,) = NPM.positions(TEST_NFT_WITH_FEES);

        assertEq(daiAfter, 14382879654257202838028);
        assertEq(usdcAfter, 807254902);
        assertEq(liquidityAfter, 13033266823054851759);
    }

    function _testTransferWithWithdrawAndSwap() internal {

        // add liquidity to existing (empty) position (add 1 DAI / 0 USDC)
        (uint128 liquidity,,) = _increaseLiquidity();

        uint countBefore = NPM.balanceOf(TEST_ACCOUNT);

        // swap half of DAI to USDC and add full range
        V3Utils.Instructions memory inst = V3Utils.Instructions(
            V3Utils.WhatToDo.WITHDRAW_AND_SWAP,
            address(USDC),
            990099009900989844, // uniswap returns 1 less when getting liquidity - this must be traded
            900000,
            _get990099009900989844DAIToUSDCSwapData(),
            0,
            0,
            "",
            0,
            0,
            0,
            liquidity,
            0,
            0,
            block.timestamp,
            "");

        vm.prank(TEST_ACCOUNT);
        NPM.safeTransferFrom(TEST_ACCOUNT, address(c), TEST_NFT_ID, abi.encode(inst));

        uint countAfter = NPM.balanceOf(TEST_ACCOUNT);

        assertEq(countAfter, countBefore); // nft returned
    }

    function _testTransferWithCollectAndSwap() internal {

        // add liquidity to existing (empty) position (add 1 DAI / 0 USDC)
        (uint128 liquidity,,) = _increaseLiquidity();

        // decrease liquidity without collect (simulate fee growth)
        vm.prank(TEST_ACCOUNT);
        (uint amount0, uint amount1) = NPM.decreaseLiquidity(INonfungiblePositionManager.DecreaseLiquidityParams(TEST_NFT_ID, liquidity, 0, 0, block.timestamp));

        // should be same amount as added
        assertEq(amount0, 1000000000000000000);
        assertEq(amount1, 0);

        uint countBefore = NPM.balanceOf(TEST_ACCOUNT);

        // swap half of DAI to USDC and add full range
        V3Utils.Instructions memory inst = V3Utils.Instructions(
            V3Utils.WhatToDo.COLLECT_AND_SWAP,
            address(USDC),
            990099009900989844, // uniswap returns 1 less when getting liquidity - this must be traded
            900000,
            _get990099009900989844DAIToUSDCSwapData(),
            0,
            0,
            "",
            0,
            0,
            0,
            0,
            0,
            0,
            block.timestamp,
            "");

        vm.prank(TEST_ACCOUNT);
        NPM.safeTransferFrom(TEST_ACCOUNT, address(c), TEST_NFT_ID, abi.encode(inst));

        uint countAfter = NPM.balanceOf(TEST_ACCOUNT);

        assertEq(countAfter, countBefore); // nft returned
    }


    function testFailEmptySwapAndIncreaseLiquidity() external {

        V3Utils.SwapAndIncreaseLiquidityParams memory params = V3Utils.SwapAndIncreaseLiquidityParams(
            TEST_NFT_ID, 0, 0, TEST_ACCOUNT, block.timestamp, IERC20(address(0)), 0, 0, "", 0, 0, "", 0, 0);

        vm.prank(TEST_ACCOUNT);
        c.swapAndIncreaseLiquidity(params);
    }

    function testSwapAndIncreaseLiquidity() external {

        V3Utils.SwapAndIncreaseLiquidityParams memory params = V3Utils.SwapAndIncreaseLiquidityParams(
            TEST_NFT_ID,
            0,
            1000000,
            TEST_ACCOUNT,
            block.timestamp,
            USDC,
            1000000,
            900000000000000000,
            _get1USDCToDAISwapData(),
            0,
            0,
            "",
            0,
            0
        );

        vm.prank(TEST_ACCOUNT);
        USDC.approve(address(c), 1000000);

        vm.prank(TEST_ACCOUNT);
        (uint128 liquidity, uint256 amount0, uint256 amount1) = c.swapAndIncreaseLiquidity(params);

        assertEq(liquidity, 1981363879662845);
        assertEq(amount0, 990185448389405712);
        assertEq(amount1, 0); // one sided adding
    }

    function testSwapAndIncreaseLiquiditBothSides() external {

        V3Utils.SwapAndIncreaseLiquidityParams memory params = V3Utils.SwapAndIncreaseLiquidityParams(
            TEST_NFT_ID_IN_RANGE,
            0,
            2000000,
            TEST_ACCOUNT,
            block.timestamp,
            USDC,
            1000000,
            900000000000000000,
            _get1USDCToDAISwapData(),
            0,
            0,
            "",
            0,
            0
        );

        vm.prank(TEST_ACCOUNT);
        USDC.approve(address(c), 2000000);

        uint usdcBefore = USDC.balanceOf(TEST_ACCOUNT);
        uint daiBefore = DAI.balanceOf(TEST_ACCOUNT);

        vm.prank(TEST_ACCOUNT);
        (uint128 liquidity, uint256 amount0, uint256 amount1) = c.swapAndIncreaseLiquidity(params);

        uint usdcAfter = USDC.balanceOf(TEST_ACCOUNT);
        uint daiAfter = DAI.balanceOf(TEST_ACCOUNT);

        assertEq(liquidity, 19268403984395);
        assertEq(amount0, 898315437527657511);
        assertEq(amount1, 990099);

        // aaaalmost all usdc spent
        assertEq(usdcBefore - usdcAfter, 1999999);
        //some dai returned - because not 100% correct swap ratio
        assertEq(daiAfter - daiBefore, 92788710970366114);
    }

    function testFailEmptySwapAndMint() external {
        V3Utils.SwapAndMintParams memory params = V3Utils.SwapAndMintParams(
            DAI, USDC, 500, MIN_TICK_500, -MIN_TICK_500, 0, 0, TEST_ACCOUNT, block.timestamp, IERC20(address(0)), 0, 0, "", 0, 0, "", 0, 0);

        vm.prank(TEST_ACCOUNT);
        c.swapAndMint(params);
    }

    function testSwapAndMint() external {
        _testSwapAndMint(MIN_TICK_500, -MIN_TICK_500, 990140532991, 990182067725057610, 990099);
    }
    function testSwapAndMintOneSided0() external {
        _testSwapAndMint(MIN_TICK_500, MIN_TICK_500 + 200000, 829527205383200265829, 0, 990099);
    }
    function testSwapAndMintOneSided1() external {
        _testSwapAndMint(-MIN_TICK_500-200000, -MIN_TICK_500, 829599633787704127364982047010492, 990185448389406138, 0);
    }

    function _testSwapAndMint(int24 lower, int24 upper, uint eLiquidity, uint eAmount0, uint aAmount1) internal {
        V3Utils.SwapAndMintParams memory params = V3Utils.SwapAndMintParams(
            DAI,
            USDC,
            500,
            lower,
            upper,
            0,
            2000000,
            TEST_ACCOUNT,
            block.timestamp,
            USDC,
            1000000,
            900000000000000000,
            _get1USDCToDAISwapData(),
            0,
            0,
            "",
            0,
            0
        );

        vm.prank(TEST_ACCOUNT);
        USDC.approve(address(c), 2000000);

        vm.prank(TEST_ACCOUNT);
        (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1) = c.swapAndMint(params);

        assertGt(tokenId, 0);
        assertEq(liquidity, eLiquidity);
        assertEq(amount0, eAmount0);
        assertEq(amount1, aAmount1);
    }

    function testSwapAndMintWithETH() public {
        V3Utils.SwapAndMintParams memory params = V3Utils.SwapAndMintParams(
            DAI,
            USDC,
            500,
            MIN_TICK_500,
            -MIN_TICK_500,
            0,
            0,
            TEST_ACCOUNT,
            block.timestamp,
            WETH_ERC20,
            500000000000000000, // 0.5ETH
            759195948032664079460,
            _get05ETHToDAISwapData(),
            500000000000000000, // 0.5ETH
            757406864,
            _get05ETHToUSDCSwapData(),
            0,
            0
        );

        vm.prank(TEST_ACCOUNT);
        (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1) = c.swapAndMint{value: 1 ether}(params);

        assertGt(tokenId, 0);
        assertEq(liquidity, 749939243373435);
        assertEq(amount0, 749970702066413447600);
        assertEq(amount1, 749907786);
    }

    function testSwapETHUSDC() public {
        V3Utils.SwapParams memory params = V3Utils.SwapParams(
            WETH_ERC20,
            USDC,
            500000000000000000, // 0.5ETH
            757406864,
            TEST_ACCOUNT,
            _get05ETHToUSDCSwapData(),
            false
        );

        vm.prank(TEST_ACCOUNT);
        (uint256 amountOut) = c.swap{value: (1 ether) / 2}(params);

        // fee in output token
        uint inputTokenBalance = WETH_ERC20.balanceOf(address(c));
        uint feeBalance = USDC.balanceOf(address(c));

        // swapped to USDC - fee
        assertEq(amountOut, 749907786);

        // input token no leftovers allowed
        assertEq(inputTokenBalance, 0);

        // fee must be kept
        assertLe(feeBalance, amountOut / 100 + 1);
        assertGe(feeBalance, amountOut / 100 - 1);
    }

    function testSwapUSDCDAI() public {
        V3Utils.SwapParams memory params = V3Utils.SwapParams(
            USDC,
            DAI,
            1000000, // 1 USDC
            9 ether / 10,
            TEST_ACCOUNT,
            _get1USDCToDAISwapData(),
            false
        );

        vm.startPrank(TEST_ACCOUNT);
        USDC.approve(address(c), 1000000);
        (uint256 amountOut) = c.swap(params);
        vm.stopPrank();

        uint inputTokenBalance = USDC.balanceOf(address(c));
        // fee in output token
        uint feeBalance = DAI.balanceOf(address(c));

        // swapped to DAI - fee
        assertEq(amountOut, 990185448389406138);
        
        // input token no leftovers allowed
        assertEq(inputTokenBalance, 0);

        // fee must be kept
        assertLe(feeBalance, amountOut / 100 + 1);
        assertGe(feeBalance, amountOut / 100 - 1);
    }

    function testSwapUSDCETH() public {
        V3Utils.SwapParams memory params = V3Utils.SwapParams(
            USDC,
            WETH_ERC20,
            1000000, // 1 USDC
            1 ether / 2000,
            TEST_ACCOUNT,
            _get1USDCToWETHSwapData(),
            true // unwrap to real ETH
        );

        uint balanceBefore = TEST_ACCOUNT.balance;

        vm.startPrank(TEST_ACCOUNT);
        USDC.approve(address(c), 1000000);
        (uint256 amountOut) = c.swap(params);
        vm.stopPrank();

        uint inputTokenBalance = USDC.balanceOf(address(c));
        // fee in output token
        uint feeBalance = WETH_ERC20.balanceOf(address(c));
        uint balanceAfter = TEST_ACCOUNT.balance;

        // swapped to ETH - fee
        assertEq(amountOut, 649674947029654);
        assertEq(amountOut, balanceAfter - balanceBefore);
        
        // input token no leftovers allowed
        assertEq(inputTokenBalance, 0);

        // fee will be kept as WETH
        assertLe(feeBalance, amountOut / 100 + 1);
        assertGe(feeBalance, amountOut / 100 - 1);
    }

    function _increaseLiquidity() internal returns (uint128 liquidity, uint256 amount0, uint256 amount1) {
        V3Utils.SwapAndIncreaseLiquidityParams memory params = V3Utils.SwapAndIncreaseLiquidityParams(
            TEST_NFT_ID,
            1000000000000000000,
            0,
            TEST_ACCOUNT,
            block.timestamp,
            IERC20(address(0)),
            0, // no swap
            0,
            "",
            0, // no swap
            0,
            "",
            0,
            0
        );

        uint balanceBefore = DAI.balanceOf(TEST_ACCOUNT);

        vm.startPrank(TEST_ACCOUNT);
        DAI.approve(address(c), 1000000000000000000);
        (liquidity, amount0, amount1) = c.swapAndIncreaseLiquidity(params);
        vm.stopPrank();

        uint balanceAfter = DAI.balanceOf(TEST_ACCOUNT);

        vm.prank(BENEFICIARY_ACCOUNT);
        uint fees = c.withdrawProtocolFee(DAI);

        assertEq(liquidity, 1981190916003322);
        assertEq(amount0, 990099009900989845); // amount minus fee
        assertEq(amount1, 0); // only added on one side     

        vm.prank(BENEFICIARY_ACCOUNT);
        uint fees2 = c.withdrawProtocolFee(DAI);
        assertEq(fees2, 0); // already withdrawn

        assertEq(balanceBefore - balanceAfter, amount0 + fees);

        uint balanceDAI = DAI.balanceOf(address(c));
        uint balanceUSDC = USDC.balanceOf(address(c));

        assertEq(balanceDAI, 0);
        assertEq(balanceUSDC, 0);
    }

    function _get1USDCToDAISwapData() internal view returns (bytes memory) {
        // https://api.0x.org/swap/v1/quote?sellToken=USDC&buyToken=DAI&sellAmount=1000000&slippagePercentage=0.01&feeRecipient=0x8cadb20A4811f363Dadb863A190708bEd26245F8&buyTokenPercentageFee=0.01
        return abi.encode(EX0x, EX0x, hex"415565b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000d9ef034e24e9c2800000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000f424000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000c43727970746f436f6d0000000000000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000dc1cec4c5d9a2d6000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ceb90e4c17d626be0facd78b79c9c87d7ca181b300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000022de8fe38b06ae0000000000000000000000008cadb20a4811f363dadb863a190708bed26245f80000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000d826ff6c6e6351d66b");
    }

    function _get1USDCToWETHSwapData() internal view returns (bytes memory) {
        // https://api.0x.org/swap/v1/quote?sellToken=USDC&buyToken=WETH&sellAmount=1000000&slippagePercentage=0.01&feeRecipient=0x8cadb20A4811f363Dadb863A190708bEd26245F8&buyTokenPercentageFee=0.01
        return abi.encode(EX0x, EX0x, hex"415565b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000002b8bff3f00e8300000000000000000000000000000000000000000000000000000000000000aa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000025368696261537761700000000000000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000002bfb7a1e5a841000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000003f7724180aa6b939894b5ca4314783b0b36b32900000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000006f7adf599be0000000000000000000000008cadb20a4811f363dadb863a190708bed26245f80000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000a65d2d51796351d67c");
    }

    function _get1DAIToUSDSwapData() internal view returns (bytes memory) {
        // https://api.0x.org/swap/v1/quote?sellToken=DAI&buyToken=USDC&sellAmount=1000000000000000000&slippagePercentage=0.01&feeRecipient=0x8cadb20A4811f363Dadb863A190708bEd26245F8&buyTokenPercentageFee=0.01
        return abi.encode(EX0x, EX0x, hex"415565b00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000eef1000000000000000000000000000000000000000000000000000000000000000ab175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000002536869626153776170000000000000000000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000f154b000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000003f7724180aa6b939894b5ca4314783b0b36b329000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000263b0000000000000000000000008cadb20a4811f363dadb863a190708bed26245f80000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000ac2127ea9c6351d699");
    }

    function _get05DAIToUSDCSwapData() internal view returns (bytes memory) {
        // https://api.0x.org/swap/v1/quote?sellToken=DAI&buyToken=USDC&sellAmount=500000000000000000&slippagePercentage=0.01&feeRecipient=0x8cadb20A4811f363Dadb863A190708bEd26245F8&buyTokenPercentageFee=0.01
        return abi.encode(EX0x, EX0x, hex"415565b00000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000000000000000777fa00000000000000000000000000000000000000000000000000000000000000ab175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000025368696261537761700000000000000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000000078b18000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000003f7724180aa6b939894b5ca4314783b0b36b329000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000131e0000000000000000000000008cadb20a4811f363dadb863a190708bed26245f80000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000ec1aef5dc36351d6ac");
    }

    function _get05ETHToDAISwapData() internal view returns (bytes memory) {
        // https://api.0x.org/swap/v1/quote?sellToken=WETH&buyToken=DAI&sellAmount=500000000000000000&slippagePercentage=0.01&feeRecipient=0x8cadb20A4811f363Dadb863A190708bEd26245F8&buyTokenPercentageFee=0.01
        return abi.encode(EX0x, EX0x, hex"415565b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000006f05b59d3b20000000000000000000000000000000000000000000000000021fcd5de52ff87236400000000000000000000000000000000000000000000000000000000000000ac02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001942616c616e636572563200000000000000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000002253d801d3d400cf43000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c80000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020c45d42f801105e861e86658648e3678ad7aa70f900010000000000000000011e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000000057022380d479abdf0000000000000000000000008cadb20a4811f363dadb863a190708bed26245f80000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd00000000000000000000000010000000000000000000000000000000000000110000000000000000000000000000000000000000000000ac187bf3196351d6f3");
    }

    function _get05ETHToUSDCSwapData() internal view returns (bytes memory) {
        // https://api.0x.org/swap/v1/quote?sellToken=WETH&buyToken=USDC&sellAmount=500000000000000000&slippagePercentage=0.01&feeRecipient=0x8cadb20A4811f363Dadb863A190708bEd26245F8&buyTokenPercentageFee=0.01
        return abi.encode(EX0x, EX0x, hex"415565b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000000000000255c8edf00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000520000000000000000000000000000000000000000000000000000000000000062000000000000000000000000000000000000000000000000000000000000000190000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000046000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000006f05b59d3b2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000001942616c616e636572563200000000000000000000000000000000000000000000000000000000000006f05b59d3b200000000000000000000000000000000000000000000000000000000000025bc3423000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002096646936b91d6b9d7d0c47c496afbf3d6ec7b6f800020000000000000000001900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000000005fa5440000000000000000000000008cadb20a4811f363dadb863a190708bed26245f80000000000000000000000000000000000000000000000000000000000000007000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000100000000000000000000000000000000000001100000000000000000000000000000000000000000000005f661183fc6351d70c");
    }

}
